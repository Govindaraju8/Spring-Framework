select * from InsurancePolicyPayments
drop table InsurancePolicyPayments


CREATE TABLE InsurancePolicyPayments (
    inpp_id serial PRIMARY KEY, 
    iplc_sindex int,
	inpp_iplc_id int,
    inpp_trans_id varchar(50),
    inpp_amount numeric,
    inpp_paymode char(10)
);
select * from InsurancePolicies 

ALTER TABLE InsurancePolicyPayments
ADD COLUMN iplc_sindex int;

UPDATE InsurancePolicyPayments SET inpp_trans_id = 'xddfg' WHERE inpp_iplc_id =14  ;

-- Sample data for the InsurancePolicies table
INSERT INTO InsurancePolicies (iplc_cust_id, iplc_cdate, iplc_sum_assured, iplc_applicable_date, iplc_insp_id, iplc_yrly_prem_amount, iplc_expdate, iplc_agnt_id, iplc_mode)
VALUES
    (1, '2023-09-25', 100000, '2023-10-01', 1, 1200, '2024-09-25', 1, 'yearly'),
    (2, '2023-09-25', 75000, '2023-10-01', 2, 800, '2024-09-25', 2, 'monthly'),
    (3, '2023-09-25', 50000, '2023-10-01', 3, 600, '2024-09-25', 3, 'quarterly');

delete  from InsurancePolicyPayments 

select * from agent
select * from InsurancePackages 
select * from Customers

select * from 
INSERT INTO Agent (agnt_name, agnt_age, agnt_gender)
VALUES
    ('John Smith', 35, 'M'),
    ('Jane Doe', 28, 'F'),
    ('Bob Johnson', 42, 'M');
    
    
    
INSERT INTO InsurancePolicySchedule (iplc_id, iplc_sindex, iplc_date, iplc_premium, iplc_paid_date)
VALUES
    (13, 1, '2023-09-25', 100, '2023-09-25'),
    (13, 2, '2023-10-25', 100, '2023-10-25'),
    (14, 1, '2023-09-25', 75, '2023-09-25'),
    (14, 2, '2023-10-25', 75, '2023-10-25'),
    (15, 1, '2023-09-25', 50, '2023-09-25');
    
select * from InsurancePolicySchedule
    
CREATE OR REPLACE FUNCTION CreatePolicyPayments(policy_id int) RETURNS void AS $$
DECLARE
    schedule_row record;
BEGIN
    -- Loop through the schedule records for the specified policy
    FOR schedule_row IN
        SELECT * FROM InsurancePolicySchedule
        WHERE iplc_id = policy_id
    LOOP
        -- Insert a record into InsurancePolicyPayments with inpp_trans_id as NULL
        INSERT INTO InsurancePolicyPayments (inpp_iplc_id,iplc_sindex, inpp_trans_id, inpp_amount, inpp_paymode)
        VALUES (schedule_row.iplc_id,schedule_row.iplc_sindex, NULL, schedule_row.iplc_premium, 'CARD');
    END LOOP;
END;
$$ LANGUAGE plpgsql;




-- Call the procedure for policy with ID 13
SELECT CreatePolicyPayments(14);


UPDATE InsurancePolicyPayments SET inpp_trans_id = 'fg' 
WHERE inpp_iplc_id =13  AND iplc_sindex=
(select iplc_sindex from InsurancePolicyPayments 
where inpp_trans_id=null order by iplc_sindex limit 1);



UPDATE InsurancePolicyPayments
SET inpp_trans_id = 'fg' 
WHERE inpp_iplc_id = 13 
AND iplc_sindex = (
    SELECT iplc_sindex
    FROM InsurancePolicyPayments 
    WHERE inpp_trans_id IS NULL 
    ORDER BY iplc_sindex 
    LIMIT 1
);


<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Insert title here</title>
    <style>
        button {
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 3px;
            padding: 8px 15px;
            cursor: pointer;
        }
    </style>
</head>

<body>
    <center>
        <h1>Your Total Amount</h1><br><br>
        <input type="number" id="amountInput" placeholder="Enter Amount" min="0" step="0.01"><br><br>
        <button id="rzp-button1">
            <i class="fas fa-money-bill"></i> Make Payment
        </button>
        <p id="amountMessage"></p>
    </center>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        document.getElementById('rzp-button1').onclick = function () {
            var amountInput = document.getElementById('amountInput');
            var amountMessage = document.getElementById('amountMessage');
            var amount = parseFloat(amountInput.value);

            if (isNaN(amount) || amount <= 0) {
                amountMessage.innerText = "Please enter a valid amount.";
                return;
            }

            var options = {
                "key": "rzp_test_ep0Ba9QlOmhL7w",
                "amount": amount * 100, // Amount in paise (100 paise = 1 INR)
                "currency": "INR",
                "handler": function (response) {
                    var transactionId = response.razorpay_payment_id;
                    updateDB(transactionId);
                },

            };

            var rzp1 = new Razorpay(options);
            rzp1.open();
        }
        
        function updateDB(transactionId) {
            var policyId =  13/* Get the policyId you want to update */;
            var requestData = {
                policyId: policyId,
                transactionId: transactionId
            };

            // Make an AJAX POST request to your Spring Boot controller
            fetch('/updatePayment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData),
            })
            .then(function(response) {
                if (response.status === 200) {
                    // Payment record updated successfully
                    alert('Payment record updated successfully.');
                } else {
                    // Handle error cases here
                    alert('Failed to update payment record.');
                }
            })
            .catch(function(error) {
                console.error('Error:', error);
            });
        }

    </script>
</body>

</html>

